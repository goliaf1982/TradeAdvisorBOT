package main

import (
    "fmt"
    "log"
    "strconv"
    "time"

    "tradeadvisorbot/internal/binance"
    "tradeadvisorbot/internal/config"
    "tradeadvisorbot/internal/database"
)

func main() {
    cfg := config.LoadConfig()

    port, err := strconv.Atoi(cfg.DBPort)
    if err != nil {
	log.Fatal("‚õî –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–æ—Ä—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    }

    err = database.Connect(cfg.DBUser, cfg.DBPassword, cfg.DBName, port)
    if err != nil {
	log.Fatal("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:", err)
    }

    err = database.InitTables()
    if err != nil {
	log.Fatal("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞–±–ª–∏—Ü—å:", err)
    }

    fmt.Println("üöÄ TradeAdvisorBOT –≥–æ—Ç–æ–≤–∏–π!")

    symbols := []string{"BTCUSDT", "ETHUSDT"}

    for {
	for _, symbol := range symbols {
	    price, err := binance.GetPrice(symbol)
	    if err != nil {
		log.Printf("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É %s: %v\n", symbol, err)
		continue
	    }
	    err = database.SaveMarketPrice(symbol, price)
	    if err != nil {
		log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è %s: %v\n", symbol, err)
		continue
	    }
	    fmt.Printf("üíæ %s: %.2f USD ‚Äî –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î\n", symbol, price)

	    // üíπ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—É—Ç–∫—É/–∑–±–∏—Ç–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∫—É–ø—ñ–≤–ª—ñ
	    profit, openPrice, found := database.CalculateProfit(symbol, price)
	    if found {
		if profit >= 0 {
		    fmt.Printf("üìà –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –ø–æ %s: %.2f (–ö—É–ø–ª–µ–Ω–æ –∑–∞ %.2f)\n", symbol, profit, openPrice)
		} else {
		    fmt.Printf("üìâ –ü–æ—Ç–æ—á–Ω–∏–π –∑–±–∏—Ç–æ–∫ –ø–æ %s: %.2f (–ö—É–ø–ª–µ–Ω–æ –∑–∞ %.2f)\n", symbol, profit, openPrice)
		}
	    }
	}

	fmt.Println("\nüìä –ó–≤—ñ—Ç –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ü—ñ–Ω:")
	report, err := database.GetLatestPrices()
	if err != nil {
	    log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É: %v\n", err)
	} else {
	    for symbol, price := range report {
		fmt.Printf("üîπ %s: %.2f USD\n", symbol, price)
	    }
	}

	time.Sleep(10 * time.Second)
    }
}
